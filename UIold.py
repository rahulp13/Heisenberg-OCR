#! /usr/bin/env python
#
# GUI module generated by PAGE version 4.9
# In conjunction with Tcl version 8.6
#    Sep 09, 2017 01:09:10 PM
import sys
import os
import tkinter.messagebox
from PIL import Image
from TextToImage import TextToImage
from Converter import Converter
from tkinter.filedialog import askopenfilename
#from tp1 import tp1
try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = 0
except ImportError:
    import tkinter.ttk as ttk
    py3 = 1

import UI_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    top = New_Toplevel_1 (root)
    UI_support.init(root, top)
    root.mainloop()

w = None
def create_New_Toplevel_1(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel (root)
    top = New_Toplevel_1 (w)
    UI_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_New_Toplevel_1():
    global w
    w.destroy()
    w = None


class New_Toplevel_1:
    def __init__(self, top=None):

        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        
        self.file_path = ""
        self.text = ""

        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#d9d9d9' # X11 color: 'gray85' 
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("600x550+387+131")
        top.title("Heisenberg OCR")
        top.configure(highlightcolor="black")

        self.TPanedwindow1 = ttk.Panedwindow(top, orient="vertical")
        self.TPanedwindow1.place(relx=0.02, rely=0.02, relheight=0.97, relwidth=0.97)
        self.TPanedwindow1.configure(width=200)
        self.extractTextTPane = ttk.Labelframe(height=200, text='Extract Text')
        self.TPanedwindow1.add(self.extractTextTPane)
        self.imageSearchTPane = ttk.Labelframe(text='Search Image')
        self.TPanedwindow1.add(self.imageSearchTPane)
        self.__funcid0 = self.TPanedwindow1.bind('<Map>', self.__adjust_sash0)

        self.imgPathFrame = Frame(self.extractTextTPane)
        self.imgPathFrame.place(relx=0.05, rely=0.15, relheight=0.25
                , relwidth=0.9)
        self.imgPathFrame.configure(relief=GROOVE)
        self.imgPathFrame.configure(borderwidth="5")
        self.imgPathFrame.configure(relief=GROOVE)
        self.imgPathFrame.configure(width=225)

        self.pathTLabel = ttk.Label(self.imgPathFrame)
        self.pathTLabel.place(relx=0.04, rely=0.2, height=25, width=37)
        self.pathTLabel.configure(background="#d9d9d9")
        self.pathTLabel.configure(foreground="#000000")
        self.pathTLabel.configure(relief=FLAT)
        self.pathTLabel.configure(text='''Path:''')

        self.pathText = Text(self.imgPathFrame)
        self.pathText.place(relx=0.11, rely=0.22, relheight=0.6, relwidth=0.7)
        self.pathText.configure(background="white")
        self.pathText.configure(font="TkTextFont")
        self.pathText.configure(selectbackground="#c4c4c4")
        self.pathText.configure(width=10)
        self.pathText.configure(wrap=WORD)

        self.browseTButton = ttk.Button(self.imgPathFrame, command=self.load_file)
        self.browseTButton.place(relx=0.82, rely=0.24, height=25, width=83)
        self.browseTButton.configure(takefocus="")
        self.browseTButton.configure(text='''Browse''')
        self.browseTButton.configure(compound="center")

        self.imgTxtScrolled = ScrolledText(self.extractTextTPane)
        self.imgTxtScrolled.place(relx=0.05, rely=0.43, relheight=0.5
                , relwidth=0.9)
        self.imgTxtScrolled.configure(background="white")
        self.imgTxtScrolled.configure(font="TkTextFont")
        self.imgTxtScrolled.configure(insertborderwidth="3")
        self.imgTxtScrolled.configure(selectbackground="#c4c4c4")
        self.imgTxtScrolled.configure(width=10)
        self.imgTxtScrolled.configure(wrap=NONE)

        self.getImgFrame = Frame(self.imageSearchTPane)
        self.getImgFrame.place(relx=0.05, rely=0.09, relheight=0.17
                , relwidth=0.9)
        self.getImgFrame.configure(relief=GROOVE)
        self.getImgFrame.configure(borderwidth="5")
        self.getImgFrame.configure(relief=GROOVE)
        self.getImgFrame.configure(width=125)

        self.typeTLabel = ttk.Label(self.getImgFrame)
        self.typeTLabel.place(relx=0.04, rely=0.25, height=28, width=68)
        self.typeTLabel.configure(background="#d9d9d9")
        self.typeTLabel.configure(foreground="#000000")
        self.typeTLabel.configure(relief=FLAT)
        self.typeTLabel.configure(text='''Enter Text:''')

        self.searchText = Entry(self.getImgFrame)
        self.searchText.place(relx=0.19, rely=0.25, relheight=0.5, relwidth=0.63)
        self.searchText.configure(background="white")
        self.searchText.configure(font="TkTextFont")
        self.searchText.configure(selectbackground="#c4c4c4")
        self.searchText.configure(width=10)

        self.searchTButton = ttk.Button(self.getImgFrame, command=self.getSearchText)
        self.searchTButton.place(relx=0.84, rely=0.25, height=28, width=73)
        self.searchTButton.configure(takefocus="")
        self.searchTButton.configure(text='''Search''')

        self.Imglistbox = ScrolledListBox(self.imageSearchTPane)
        self.Imglistbox.place(relx=0.05, rely=0.31, relheight=0.65, relwidth=0.9)
        self.Imglistbox.configure(background="white")
        self.Imglistbox.configure(font="TkFixedFont")
        self.Imglistbox.configure(highlightcolor="#d9d9d9")
        self.Imglistbox.configure(selectbackground="#c4c4c4")
        self.Imglistbox.configure(width=10)

    def __adjust_sash0(self, event):
        paned = event.widget
        pos = [200, ]
        i = 0
        for sash in pos:
            paned.sashpos(i, sash)
            i += 1
        paned.unbind('<map>', self.__funcid0)
        del self.__funcid0


    def load_file(self):
        self.file_path = askopenfilename(initialdir="home/", title="Choose Image File", filetypes=(("JPEG files", "*.jpg"),("PNG files", "*.png")))
        if self.file_path:
            try:
                self.pathText.insert('1.0', self.file_path)
            except:                     
                messagebox.showerror("Open Source File", "Failed to open file\n'%s'" % self.file_path)
        else:
            messagebox.showerror("Open Source File", "Choose a file first!!\n")

        temp=os.path.basename(self.file_path)
        temp2=os.path.dirname(self.file_path)
        obj=Converter(temp,temp2)
        v=obj.execute()
        self.getTempText(v)

        self.load_desc()
        tp1().speech(v)



    def load_desc(self):
        self.imgTxtScrolled.insert('1.0', self.setTempText())


    def getSearchText(self):
        #print(self.searchText.get())
        temp3 = os.path.dirname(self.file_path)

        obj=TextToImage(temp3,self.searchText.get())
        obj.textDict()
        temp4=obj.search()
        return self.searchText.get()

    def getTempText(self, desc):
        self.text = desc

    def setTempText(self):
        return self.text

    def load_image(self, images):
        if not self.file_path:
            messagebox.showerror("Error", "Input Image First!!!\n")
        else:
            path = os.path.dirname(self.file_path)
            img = ImageTk.PhotoImage(Image.open(self.file_path))
            self.Imglistbox.configure(image=img)                                    


# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)

        #self.configure(yscrollcommand=_autoscroll(vsb),
        #    xscrollcommand=_autoscroll(hsb))
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))

        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')

        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)

        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = Pack.__dict__.keys() | Grid.__dict__.keys() \
                  | Place.__dict__.keys()
        else:
            methods = Pack.__dict__.keys() + Grid.__dict__.keys() \
                  + Place.__dict__.keys()

        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        return func(cls, container, **kw)
    return wrapped





class ScrolledText(AutoScroll, Text):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        Text.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)




class ScrolledListBox(AutoScroll, Listbox):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        Listbox.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

if __name__ == '__main__':
    vp_start_gui()
